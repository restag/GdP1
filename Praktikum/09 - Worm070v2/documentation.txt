This is the documentation of the current state of the worm game


********************************************
* board_model
********************************************
defines - board_model
********************************************

********************************************
typedefs - board_model
********************************************
boardcodes_t
colorpairs_t
pos_t
board_t

********************************************
functions - board_model
********************************************
board_t* allocBlankBoard()
void freeBoard(board_t* aBoard)
setNumberOfFoodItems(board_t* aboard, int n)
getLastRowOnBoard(board_t* aboard)
getLastColOnBoard(board_t* abaord)
getNumberOfFoodItems(board_t* abaord)

********************************************
structs - board_model
********************************************


********************************************
* game_controller
********************************************
defines - game_controller
********************************************
NAP_TIME

********************************************
typedefs - game_controller
********************************************
rescodes_t
gamestates_t

********************************************
functions - game_controller
********************************************
rescodes_t doLevel()


********************************************
* message_model
********************************************
defines - message_model
********************************************

********************************************
typedefs - message_model
********************************************
message_t

********************************************
functions - message_model
********************************************
message_t* initBlankMessage()
void freeMessage(message_t* aMessage)
void setMsgString(message_t* aMessage, char* aString)
void clearMsgString(message_t* aMessage)


********************************************
* messagearea_controller
********************************************
functions - messagearea_controller
********************************************
void clearLineInMessageArea(messageare_t* aMessageArea, int lineNumber)
void showStatus(messagearea_t* aMessageArea, worm_t* aworm)

********************************************
* messagearea_model
********************************************
defines - messagearea_model
********************************************
MESSAGEAREA_MIN_HEIGHT
MESSAGEAREA_BLANKS_RESERVED LEFT
MESSAGEAREA_BLANKS_RESERVED RIGHT

********************************************
typedefs - messagearea_model
********************************************
messagearea_t

********************************************
functions - messagearea_model
********************************************
messagearea_t* allocBlankMessageArea()
void freeMessageArea(messagearea_t* aMessageArea)
void setMessageAtLine(messagearea_t* aMessageArea, message_t* aMessage, int lineNumber)
message_t* getMessageFromLine(messagearea_t* aMessageArea, int lineNumber)


********************************************
* prep
********************************************
defines - prep
********************************************
MIN_NUMBER_OF_ROWS
MIN_NUMBER_OF_COLS

********************************************
typedefs - prep
********************************************

********************************************
functions - prep
********************************************
void initializeCursesApp()
void cleanupCursesApp()
bool windowHasMinSize()


********************************************
* userinteraction_controler
********************************************
fuctions - userinteraction_controler
********************************************
void readUserInput(worm_t* aworm, gamestates_t* agame_state)


********************************************
********************************************
* worm
********************************************
functions - worm
********************************************
int main()


********************************************
********************************************
* worm_controller
********************************************
functions - worm_controller
********************************************
worm_t* createDefaultWorm()
void setWormHeading(worm_t* aworm, wormheading_t dir)

********************************************
********************************************
worm_model
********************************************
defines - worm_model
********************************************
WORM_LENGTH
WORM_INITIAL_LENGTH
********************************************
typedef - worm_model
********************************************
wormt_t
worm_heading_t

********************************************
functions - worm_model
********************************************
worm_t* allocBlankWorm()
void freeWorm(worm_t* aworm);

void initializeDefaultWorm(worm_t* aworm)
void initializeWormWithValues(worm_t* aworm, pos_t startPos, colorpairs_t wcolor) 

void setCurLastIndex(worm_t* aworm, int lastIndex)
void setHeadIndex(worm_t* aworm, int headindex)
void setWormPos(worm_t* aworm, pos_t startPos)
void setNextStep(worm_t* aworm, pos_t nextStep)

void setWormColor(worm_t* aworm, colorpairs_t wcolor)

pos_t getWormHeadPos(worm_t* aworm)
int getWormLength(worm_t* aworm)


********************************************
global vars
********************************************
